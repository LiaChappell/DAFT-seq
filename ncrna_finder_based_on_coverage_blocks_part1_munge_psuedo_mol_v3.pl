#!/usr/bin/perl -w
use strict;
use Getopt::Long;

### DAFT-seq ncRNA finder ###
# by Lia Chappell, lc5@sanger.ac.uk, January 2016


### Notes ###
# Using the pseudomolecules made with a threshold of 20 reads looks better in Artemis than the one with a threshold of 5 reads


### GFF inputs ###
my $pseudo_mol; #make these with another script
my $all_feat; #gff with all features
my $genes; #gff, external coordinates of CDS
my $utrs_5; #coverage-based 
my $utrs_3; #coverage-based
my $ipts; #coverage-based
my $utrs_tso = 1; #coverage-based (optional)

### Other input ###
my $h2h_list; #list of head-to-head genes, single column
my $bedtools_genome_file; ## genome file for bedtools
my $merge; #size of gap to that can be merged to give fewer ncRNAs
my $out_pref; #prefix of the output files generated by this script

### Some default variables ###
my $dist_us_5utr = 200;
my $dist_ds_3utr = 200;
my $dist_put_ipt = 1000;
my $dist_h2h_win = 1000;

GetOptions
(
    	"p|pseudo_mol:s"	    	=> \$pseudo_mol,
	"a|all_feat:s"    		=> \$all_feat,
	"g|gene_external:s"		=> \$genes,
	"f|utrs_5:s"    		=> \$utrs_5,
	"t|utrs_3:s"    		=> \$utrs_3,
	"u|utrs_tso:s"			=> \$utrs_tso, #optional
	"i|ipts:s"              	=> \$ipts,
	"h|head_to_head_genes:s"	=> \$h2h_list,
	"b|bedtools_genome_file:s"	=> \$bedtools_genome_file,
	"m|merge_win_size:s"		=> \$merge,
	"o|out_pref:s"   	 	=> \$out_pref,
);

if (!defined $pseudo_mol || !defined $all_feat)
{
         print_usage();
         exit;
}

sub print_usage
{
    print <<USAGE;
    
### DAFT-seq ncRNA finder ###
# by Lia Chappell, lc5_at_sanger.ac.uk, January 2016       
	
   	"p|pseudo_mol:s"    		=> \$pseudo_mol,
	"a|all_feat:s"    		=> \$all_feat,
	"g|gene_external:s"		=> \$genes,
	"f|utrs_5:s"    		=> \$utrs_5,
	"t|utrs_3:s"    		=> \$utrs_3,
	"u|utrs_tso:s"			=> \$utrs_tso, #optional
	"i|ipts:s"              	=> \$ipts,
	"h|head_to_head_genes:s"	=> \$h2h_list,
	"b|bedtools_genome_file:s"	=> \$bedtools_genome_file,
	"m|merge_win_size:s"		=> \$merge,
	"o|out_pref:s"   	 	=> \$out_pref,        
        

USAGE
}

### 0. Merge plus and minus pseudo molecules
# not needed...

### 1. Round up all the things that ncRNAs shouldn't overlap with
system "cat $all_feat $utrs_5 $utrs_3 $ipts| sort -k 1,1 -k 4,4n > temp.$$.1.gff";
system "grep -v \"#\" temp.$$.1.gff > temp.$$.1.clean.gff";

### 2. Keep the bits of the pseudo molecules that don't overlap with these other features
system "bedtools intersect -v -s -a $pseudo_mol -b temp.$$.1.clean.gff > temp.$$.2.gff";

### 3. Merge all the fragments into windows to get something that's possible to work with
system "bedtools merge -s -d $merge -i temp.$$.2.gff > temp.$$.3.gff";
open (LOG, ">log.$out_pref.gff.txt") or die "$!";
print LOG "script=\"$0\";pseudo_mol=\"$pseudo_mol\";non-overlap gffs =\"$all_feat,$utrs_5,$utrs_3,$ipts\";merge_win_size=\"$merge\"; out=\"$out_pref.*\";\n"; 

### 4. Optional search for overlaps with TSO-based 5 UTRs
if ($utrs_tso != 1){ # if they've been read in, overwriting the value set at beginning of script
	system "bedtools intersect -s -a temp.$$.3.gff -b utrs_tso > temp.$$.4.gff";
}
if ($utrs_tso == 1) { # no tso-based utrs, default value remains
	system "cp temp.$$.3.gff > temp.$$.4.gff";
}

### 5. Look for orphan bits of 5 UTRs near coverage-based 5 UTRs (caution for head-to-head genes)
# Near is probably 200 bp us, so at top of script $dist_us_5utr = 200
# Look at 5 UTRS not on list of head-to-head genes
system "bedtools flank -s -l $dist_us_5utr -r 0 -i $utrs_5 -g $bedtools_genome_file > temp.$$.all.flank_5utrs.gff"; # windows upstream of 5 UTRs
system "grep -v -f $h2h_list temp.$$.all.flank_5utrs.gff >temp.$$.not_h2h.flank_5utrs.gff"; # only look at genes that aren't head-to-head
system "bedtools intersect -s -a temp.$$.4.gff -b temp.$$.not_h2h.flank_5utrs.gff > $out_pref.putative_5utr_coverage.gff"; # bits of putative 5 UTRs (overlap upstream window)
system "bedtools intersect -s -v -a temp.$$.4.gff -b temp.$$.flank_5utrs.gff > temp.$$.5.gff"; # everything else

### 6. Look for orphan ipts (caution for head-to-head genes)
# Near is probably 1000 bp us os, so at top of script $dist_put_ipt = 1000
# Look at 5 UTRS not on list of head-to-head genes
system "bedtools flank -s -l $dist_put_ipt -r 0 -i $utrs_5 -g $bedtools_genome_file > temp.$$.all.flank_5utrs_2.gff"; # windows upstream of 5 UTRs 
system "perl -p -i -e 's/+/£££/g' temp.$$.all.flank_5utrs_2.gff"; # switch strand
system "perl -p -i -e 's/-/+/g' temp.$$.all.flank_5utrs_2.gff"; # switch strand
system "perl -p -i -e 's/£££/-/g' temp.$$.all.flank_5utrs_2.gff"; # switch strand
system "grep -v -f $h2h_list temp.$$.all.flank_5utrs_2.gff >temp.$$.not_h2h.flank_5utrs_2.gff"; # only look at genes that aren't head-to-head
system "bedtools intersect -s -a temp.$$.5.gff -b temp.$$.not_h2h.flank_5utrs_2.gff > $out_pref.putative_ipt_coverage.gff"; # bits of putative ipts (overlap upstream opposite strand window)
system "bedtools intersect -s -a temp.$$.5.gff -b temp.$$.not_h2h.flank_5utrs_2.gff > temp.$$.6.gff"; # everything else

### 7. Look for orphan bits of 3 UTRs near coverage-based 3 UTRs 
# Near is probably 200 bp ds, so at top of script $dist_ds_3utr = 200
system "bedtools flank -s -l 0 -r $dist_ds_3utr -i $utrs_3 -g $bedtools_genome_file > temp.$$.all.flank_3utrs.gff"; # windows downstream of 3 UTRs
system "bedtools intersect -s -a temp.$$.6.gff -b temp.$$.all.flank_3utrs.gff > $out_pref.putative_5utr_coverage.gff"; # bits of putative 3 UTRs (overlap downstream window)
system "bedtools intersect -v -s -a temp.$$.6.gff -b temp.$$.all.flank_3utrs.gff > temp.$$.7.gff";  # everything else

### 8. Look for bits of coverage "between" head-to-head genes (could be 5 UTR or ipts)
# Look at 5 UTRS *on* list of head-to-head genes
# Near is probably 1000 bp us os, so at top of script $dist_h2h_win =1000
system "bedtools flank -s -l $dist_h2h_win -r 0 -i $utrs_5 -g $bedtools_genome_file > temp.$$.all.flank_5utrs_3.gff"; # windows upstream of 5 UTRs 
system "grep -f $h2h_list temp.$$.all.flank_5utrs_3.gff >temp.$$.h2h.flank_5utrs_3.gff"; # only look at genes that *are* head-to-head
system "bedtools intersect -s -a temp.$$.7.gff -b temp.$$.h2h.flank_5utrs_3.gff > $out_pref.between_h2h_coverage.gff"; # bits of stuff between head-to-head genes (overlap long upstream window)
system "bedtools intersect -v -s -a temp.$$.7.gff -b temp.$$.h2h.flank_5utrs_3.gff >temp.$$.8.gff"; # everything else


### 9. Filter ncRNA antisense to coding sequence (assume interesting ncRNAs will have bits that overhang)
# Gets rid of noise from dUTP protocol antisense to mRNA (about 1%, so quite a few reads for highly expressed genes)
system "bedtools intersect -a temp.$$.8.gff -b $genes > temp.$$.9.gff"; # not strand specific, so will pick up overlaps on opposite strand, as overlaps on same strand already filtered earlier

# The rest that's left is probably mainly ncRNA...
# Probably sort into size categories...
# a. probably junk (<150 bp)
# b. maybe junk (150-199 bp)
# c. more likely to be real (>199 bp)

# Calculate size
open (GFF, "<temp.$$.9.gff") or die "$!";
open (OUT_S, ">out_pref.putative_ncRNA.lt150nt.gff") or die "$!";
open (OUT_M, ">out_pref.putative_ncRNA.gt150nt_lt200nt.gff") or die "$!";
open (OUT_L, ">out_pref.putative_ncRNA.gtet200nt.gff") or die "$!";
while (<GFF>){
	chomp;
	my @gff = split /\t/;
	my $size = ($gff[3] - $gff[4] +1); # start - end +1 for gff
	if ($size <150){
		print OUT_S "$_\n";
	}
	if ($size >149 && $size <200){
		print OUT_M "$_\n";
	}
	if ($size >199){
		print OUT_L "$_\n";
	}
}

### 10. Tidy up!
# system "rm tmp.$$.*";

exit;
