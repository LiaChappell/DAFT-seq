Instructions for the UTRs by coverage "pipeline"

Author: Lia Chappell (lc5@sanger.ac.uk)

### Inputs and outputs ###

Input files needed:
Script 1: BAM files (mapped with TopHat)
Script 2: Output of script 1, two GFF files (all features, genes you want to call UTRs for), rpkms of genes (to filter for only expressed genes)
Script 3: Outout of script 2

Decisions needed for thresholds:
Script 1: None
Script 2: Minimum no. of reads ("coverage threshold") needed to call edge of each "coverage block", how much more stringent to be when genes are overlapping
Script 3: None 

Output:
A gff file containing set of predicted UTRs, based on drops in coverage


### How to run the scripts ###

1. Map your BAM files with TopHat, using the XS tag to encode directional information 
(My data using the "dUTP" protocol to keep directional info)

2. Merge all the BAM files you want to call UTRs from 
(I had BAM files that were about 7Gb in total)

3. Run the first script on your combined BAM file. 
(This will output two files, containing coverage info for the two DNA strands, that are needed for each instance of the second script)
To bsub: I think I ran this will 1 Gb RAM to make sure it finished without errors. Probably needs less than this!

4. Run mulitple instances of the second script (can be done in same directory) 

a) Coverage thresholds
- I ran this with coverage thresholds from 5 to 100 for my datasets, incrementing in 5s (5,10,15,20 etc)
- You can do this in bash with "for x in {5..100..5}; do <stuff including $x>; done"
- I think this set of thresholds should be moderately robust across different data sets, but if not play with the bottom one first- that makes the most difference

b) OLOS theshold
- Short for "overlapping on opposite strand"
- There's a level of molecular biology noise in directional RNA-seq data that gives <1% of reads mapping to the "wrong" strand
- The upshot of this is that were UTRs overlap with a gene on the opposite strand (usually for overlapping 3'UTRs in my data sets), the UTRs appear too long, because of false antisense generated by the gene transcribed on the opposite strand.
- I tried multiple strategies to overcome this problem- this simplest one worked best!
- Solution: require a more stringent coverage threshold to call the edge of a coverage block than a UTR that does not overlap with a gene on the opposite strand
- Recommended threshold: 10 reads worked well for my data sets. 

c) GFF files
- Hopefully obvious, but make sure the chromosome names match those in your BAM file...
- These scripts don't expect to see the DNA sequence, so get rid of that before you use the script
- The all features file should include protein-coding genes, ncRNAs and anything else UTRs shouldn't overlap with (on the same strand at least)
- The genes file is the set of features that you want UTRs from. This should just be the external coordinates of the gene (equivalent to transcript if there are no alternative splice forms annotated). Get rid of all the child features (exons etc), to leave one entry per gene.

d) RPKMs for parent genes
- So this is probably more obvious to a reader than it was to me intially, but you don't want to call UTRs for genes that aren't expressed
- Genes that are lowly expressed can get weird looking short UTRs - as coverage is just above a threshold that can just about make UTR calls
- Better off getting rid of these!
- I use a stricter threshold for calling a gene expressed than I would in other circumstances- because coverage is lower at edge than middle
- A threshold of 10 RPKM works well for my data (there is obvious rubbish at 5 RPKM, which enough to detect coverage in the ORF)

5. Run the third script, which picks the longest possible UTR for each gene
- Reads in output of script 2
- Takes the UTR with the lowest coverage threshold possible for each gene- which will also be the longest
- Prints out one file- set of UTR predictions
 

### What the scripts are doing ###

Script 1:
- Splits the merged BAM file into the plus and minus strands based on XS tags. This is not the same as splitting by strand mapped to, as both reads in a pair should have the same XS tag/strand. 
- Calls coverage at each base, using Bedtools. Done separately for each strand. These coverage files are an input of script 2.


Script 2: 
- Considers each DNA stand separately
- Makes blocks of continuous coverage at each threshold using Bedtools - "pseudo-molecules" in the comments within the script
- These blocks of coverage normally have an annotated gene at their centre
- A trick that makes this work for spliced UTRs is effectively taking external coordinates of split reads- see comment in the script for Bedtools command
- Makes UTRs from the bits that overhang the annotated genes (like Adam's UTR finder script)
- Filters out UTRs which overlap a second gene on the same strand (e.g. where there was no drop in coverage below specified threshold in intergenic region)
- Filters out UTRs which overlap other features on the same strand (e.g. ncRNAs or centromeric regions)
- Reports set of UTRs which don't overlap other features  at that coverage threshold
- Fewer UTRs will be called at higher thresholds
- At lower thresholds more UTRs  are filtered out by overlaps with other features
- "Best" UTRs are the longest ones that are detectable, but that don't overlap with other features on same strand

Script 3:
- Combines UTRs in order of preference (numerical for thresholds) for each gene
- So would preferentially take the slightly longer UTR from coverage block with a threshold of 5 reads before the slightly shorter one at threshold of 10 reads
- Most UTRs will be from the lower thresholds
- Some UTRs will be from higher thresholds- these UTRs should reflect drop in coverage in an intergenic region that has closely adjecent 3' and 5' UTRs

### Feedback? ###
- Good to hear, whether good or bad!
- Email lc5@sanger.ac.uk
